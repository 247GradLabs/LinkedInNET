//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// XML document found at '\src\NET35.Sparkle.LinkedInNET\..\LinkedInApiV2.xml'

#region ReturnTypes for Profiles

// WriteReturnTypes(Profiles, person)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'person'
    /// </summary>
    [Serializable, XmlRoot("person")]
    public class Person
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'firstName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "firstName")]
        [JsonProperty(PropertyName = "firstName")]
        public Common.MultiLocaleString FirstName { get; set; }

        /// <summary>
        /// Field: 'lastName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastName")]
        [JsonProperty(PropertyName = "lastName")]
        public Common.MultiLocaleString LastName { get; set; }

        /// <summary>
        /// Field: 'maidenName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "maidenName")]
        [JsonProperty(PropertyName = "maidenName")]
        public Common.MultiLocaleString MaidenName { get; set; }

        /// <summary>
        /// Field: 'phoneticFirstName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phoneticFirstName")]
        [JsonProperty(PropertyName = "phoneticFirstName")]
        public Common.MultiLocaleString PhoneticFirstName { get; set; }

        /// <summary>
        /// Field: 'phoneticLastName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "phoneticLastName")]
        [JsonProperty(PropertyName = "phoneticLastName")]
        public Common.MultiLocaleString PhoneticLastName { get; set; }

        /// <summary>
        /// Field: 'headline' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "headline")]
        [JsonProperty(PropertyName = "headline")]
        public Common.MultiLocaleString Headline { get; set; }

        /// <summary>
        /// Field: 'location' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "location")]
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Field: 'industryName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "industryName")]
        [JsonProperty(PropertyName = "industryName")]
        public Common.MultiLocaleRichText IndustryName { get; set; }

        /// <summary>
        /// Field: 'summary' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "summary")]
        [JsonProperty(PropertyName = "summary")]
        public Common.MultiLocaleRichText Summary { get; set; }

        /// <summary>
        /// Field: 'specialties' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "specialties")]
        [JsonProperty(PropertyName = "specialties")]
        public Common.MultiLocaleRichText Specialties { get; set; }

        /// <summary>
        /// Field: 'positions' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "positions")]
        [JsonProperty(PropertyName = "positions")]
        public Position Positions { get; set; }

        /// <summary>
        /// Field: 'profilePicture' (on-demand)
        /// Field: 'profilePicture(displayImage~~~playableStreams)'
        /// </summary>
        [XmlElement(ElementName = "profilePicture")]
        [JsonProperty(PropertyName = "profilePicture")]
        public ProfilePicture ProfilePicture { get; set; }

        /// <summary>
        /// Field: 'vanityName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "vanityName")]
        [JsonProperty(PropertyName = "vanityName")]
        public string VanityName { get; set; }

        /// <summary>
        /// Field: 'lastModified' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastModified")]
        [JsonProperty(PropertyName = "lastModified")]
        public long? LastModified { get; set; }

        /// <summary>
        /// Field: 'organizations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organizations")]
        [JsonProperty(PropertyName = "organizations")]
        public JObject Organizations { get; set; }

    }
}

// WriteReturnTypes(Profiles, location)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'location'
    /// </summary>
    [Serializable, XmlRoot("location")]
    public class Location
    {
        /// <summary>
        /// Field: 'countryCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "countryCode")]
        [JsonProperty(PropertyName = "countryCode")]
        public string CountryCode { get; set; }

        /// <summary>
        /// Field: 'postalCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "postalCode")]
        [JsonProperty(PropertyName = "postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// Field: 'standardizedLocationUrn' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "standardizedLocationUrn")]
        [JsonProperty(PropertyName = "standardizedLocationUrn")]
        public string StandardizedLocationUrn { get; set; }

        /// <summary>
        /// Field: 'userSelectedGeoPlaceCode' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "userSelectedGeoPlaceCode")]
        [JsonProperty(PropertyName = "userSelectedGeoPlaceCode")]
        public string UserSelectedGeoPlaceCode { get; set; }

    }
}

// WriteReturnTypes(Profiles, position)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'position'
    /// </summary>
    [Serializable, XmlRoot("position")]
    public class Position
    {
        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'company' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "company")]
        [JsonProperty(PropertyName = "company")]
        public string Company { get; set; }

        /// <summary>
        /// Field: 'companyName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "companyName")]
        [JsonProperty(PropertyName = "companyName")]
        public Common.MultiLocaleString CompanyName { get; set; }

        /// <summary>
        /// Field: 'description' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "description")]
        [JsonProperty(PropertyName = "description")]
        public Common.MultiLocaleRichText Description { get; set; }

        /// <summary>
        /// Field: 'endMonthYear' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "endMonthYear")]
        [JsonProperty(PropertyName = "endMonthYear")]
        public DateParts EndMonthYear { get; set; }

        /// <summary>
        /// Field: 'location' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "location")]
        [JsonProperty(PropertyName = "location")]
        public Location Location { get; set; }

        /// <summary>
        /// Field: 'locationName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "locationName")]
        [JsonProperty(PropertyName = "locationName")]
        public Common.MultiLocaleRichText LocationName { get; set; }

        /// <summary>
        /// Field: 'richMediaAssociations' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "richMediaAssociations")]
        [JsonProperty(PropertyName = "richMediaAssociations")]
        public List<RichMediaURN> RichMediaAssociations { get; set; }

        /// <summary>
        /// Field: 'startMonthYear' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "startMonthYear")]
        [JsonProperty(PropertyName = "startMonthYear")]
        public DateParts startMonthYear { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        [JsonProperty(PropertyName = "title")]
        public Common.MultiLocaleString Title { get; set; }

    }
}

// WriteReturnTypes(Profiles, dateParts)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'dateParts'
    /// </summary>
    [Serializable, XmlRoot("dateParts")]
    public class DateParts
    {
        /// <summary>
        /// Field: 'year' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "year")]
        [JsonProperty(PropertyName = "year")]
        public short? Year { get; set; }

        /// <summary>
        /// Field: 'month' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "month")]
        [JsonProperty(PropertyName = "month")]
        public short? Month { get; set; }

        /// <summary>
        /// Field: 'day' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "day")]
        [JsonProperty(PropertyName = "day")]
        public short? Day { get; set; }

    }
}

// WriteReturnTypes(Profiles, richMediaURN)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'richMediaURN'
    /// </summary>
    [Serializable, XmlRoot("richMediaURN")]
    public class RichMediaURN
    {
        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        [JsonProperty(PropertyName = "content")]
        public JObject Content { get; set; }

        /// <summary>
        /// Field: 'description' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "description")]
        [JsonProperty(PropertyName = "description")]
        public Common.MultiLocaleRichText Description { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public long? Id { get; set; }

        /// <summary>
        /// Field: 'member' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "member")]
        [JsonProperty(PropertyName = "member")]
        public JObject Member { get; set; }

        /// <summary>
        /// Field: 'thumbnailImage' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "thumbnailImage")]
        [JsonProperty(PropertyName = "thumbnailImage")]
        public JObject ThumbnailImage { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        [JsonProperty(PropertyName = "title")]
        public Common.MultiLocaleString title { get; set; }

    }
}

// WriteReturnTypes(Profiles, profilePicture)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'profilePicture'
    /// </summary>
    [Serializable, XmlRoot("profilePicture")]
    public class ProfilePicture
    {
        /// <summary>
        /// Field: 'displayImage' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "displayImage")]
        [JsonProperty(PropertyName = "displayImage")]
        public string DisplayImage { get; set; }

        /// <summary>
        /// Field: 'displayImage~' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "displayImage~")]
        [JsonProperty(PropertyName = "displayImage~")]
        public DisplayImageLoaded DisplayImageLoaded { get; set; }

    }
}

// WriteReturnTypes(Profiles, displayImageLoaded)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'displayImageLoaded'
    /// </summary>
    [Serializable, XmlRoot("displayImageLoaded")]
    public class DisplayImageLoaded
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<DisplayImageElements> Elements { get; set; }

    }
}

// WriteReturnTypes(Profiles, displayImageElements)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'displayImageElements'
    /// </summary>
    [Serializable, XmlRoot("displayImageElements")]
    public class DisplayImageElements
    {
        /// <summary>
        /// Field: 'artifact' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "artifact")]
        [JsonProperty(PropertyName = "artifact")]
        public string Artifact { get; set; }

        /// <summary>
        /// Field: 'authorizationMethod' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authorizationMethod")]
        [JsonProperty(PropertyName = "authorizationMethod")]
        public string AuthorizationMethod { get; set; }

        /// <summary>
        /// Field: 'identifiers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifiers")]
        [JsonProperty(PropertyName = "identifiers")]
        public List<DisplayImageElementIdentifiers> Identifiers { get; set; }

    }
}

// WriteReturnTypes(Profiles, displayImageElementIdentifiers)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'displayImageElementIdentifiers'
    /// </summary>
    [Serializable, XmlRoot("displayImageElementIdentifiers")]
    public class DisplayImageElementIdentifiers
    {
        /// <summary>
        /// Field: 'identifier' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifier")]
        [JsonProperty(PropertyName = "identifier")]
        public string Identifier { get; set; }

        /// <summary>
        /// Field: 'file' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "file")]
        [JsonProperty(PropertyName = "file")]
        public string File { get; set; }

        /// <summary>
        /// Field: 'index' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "index")]
        [JsonProperty(PropertyName = "index")]
        public string Index { get; set; }

        /// <summary>
        /// Field: 'mediaType' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "mediaType")]
        [JsonProperty(PropertyName = "mediaType")]
        public string MediaType { get; set; }

        /// <summary>
        /// Field: 'identifierExpiresInSeconds' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "identifierExpiresInSeconds")]
        [JsonProperty(PropertyName = "identifierExpiresInSeconds")]
        public long? IdentifierExpiresInSeconds { get; set; }

    }
}

// WriteReturnTypeFields(Profiles)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'person', 'location', 'position', 'dateParts', 'richMediaURN', 'profilePicture', 'displayImageLoaded', 'displayImageElements', 'displayImageElementIdentifiers' return types.
    /// </summary>
    public static class ProfilesFields {
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithId(this FieldSelector<Person> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'firstName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithFirstName(this FieldSelector<Person> me) { return me.Add("firstName"); }
        
        /// <summary>
        /// Includes the field 'lastName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLastName(this FieldSelector<Person> me) { return me.Add("lastName"); }
        
        /// <summary>
        /// Includes the field 'maidenName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithMaidenName(this FieldSelector<Person> me) { return me.Add("maidenName"); }
        
        /// <summary>
        /// Includes the field 'phoneticFirstName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneticFirstName(this FieldSelector<Person> me) { return me.Add("phoneticFirstName"); }
        
        /// <summary>
        /// Includes the field 'phoneticLastName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPhoneticLastName(this FieldSelector<Person> me) { return me.Add("phoneticLastName"); }
        
        /// <summary>
        /// Includes the field 'headline'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithHeadline(this FieldSelector<Person> me) { return me.Add("headline"); }
        
        /// <summary>
        /// Includes the field 'location'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLocation(this FieldSelector<Person> me) { return me.Add("location"); }
        
        /// <summary>
        /// Includes the field 'industryName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithIndustryName(this FieldSelector<Person> me) { return me.Add("industryName"); }
        
        /// <summary>
        /// Includes the field 'summary'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSummary(this FieldSelector<Person> me) { return me.Add("summary"); }
        
        /// <summary>
        /// Includes the field 'specialties'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithSpecialties(this FieldSelector<Person> me) { return me.Add("specialties"); }
        
        /// <summary>
        /// Includes the field 'positions'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithPositions(this FieldSelector<Person> me) { return me.Add("positions"); }
        
        /// <summary>
        /// Includes the field 'profilePicture(displayImage~~~playableStreams)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithDisplayImageLoaded(this FieldSelector<Person> me) { return me.Add("profilePicture(displayImage~~~playableStreams)"); }
        
        /// <summary>
        /// Includes the field 'vanityName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithVanityName(this FieldSelector<Person> me) { return me.Add("vanityName"); }
        
        /// <summary>
        /// Includes the field 'lastModified'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithLastModified(this FieldSelector<Person> me) { return me.Add("lastModified"); }
        
        /// <summary>
        /// Includes the field 'organizations'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithOrganizations(this FieldSelector<Person> me) { return me.Add("organizations"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Person> WithAllFields(this FieldSelector<Person> me) { return me.AddRange("id", "firstName", "lastName", "maidenName", "phoneticFirstName", "phoneticLastName", "headline", "location", "industryName", "summary", "specialties", "positions", "profilePicture(displayImage~~~playableStreams)", "vanityName", "lastModified", "organizations"); }
        
    }
}

#endregion

#region ReturnTypes for Organizations

// WriteReturnTypes(Organizations, organization)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'organization'
    /// </summary>
    [Serializable, XmlRoot("organization")]
    public class Organization
    {
        /// <summary>
        /// Field: 'id' (default)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public long Id { get; set; }

        /// <summary>
        /// Field: 'name' (default)
        /// </summary>
        [XmlElement(ElementName = "name")]
        [JsonProperty(PropertyName = "name")]
        public Common.MultiLocaleString Name { get; set; }

        /// <summary>
        /// Field: 'logo' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "logo")]
        [JsonProperty(PropertyName = "logo")]
        public CroppedImage Logo { get; set; }

        /// <summary>
        /// Field: 'vanityName' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "vanityName")]
        [JsonProperty(PropertyName = "vanityName")]
        public string VanityName { get; set; }

    }
}

// WriteReturnTypes(Organizations, croppedImage)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'croppedImage'
    /// </summary>
    [Serializable, XmlRoot("croppedImage")]
    public class CroppedImage
    {
        /// <summary>
        /// Field: 'height' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "height")]
        [JsonProperty(PropertyName = "height")]
        public int Height { get; set; }

        /// <summary>
        /// Field: 'width' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "width")]
        [JsonProperty(PropertyName = "width")]
        public int Width { get; set; }

        /// <summary>
        /// Field: 'x' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "x")]
        [JsonProperty(PropertyName = "x")]
        public int X { get; set; }

        /// <summary>
        /// Field: 'y' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "y")]
        [JsonProperty(PropertyName = "y")]
        public int Y { get; set; }

        /// <summary>
        /// Field: 'cropped' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "cropped")]
        [JsonProperty(PropertyName = "cropped")]
        public string Cropped { get; set; }

        /// <summary>
        /// Field: 'original' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "original")]
        [JsonProperty(PropertyName = "original")]
        public string Original { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrganizationalEntityAcls)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrganizationalEntityAcls'
    /// </summary>
    [Serializable, XmlRoot("OrganizationalEntityAcls")]
    public class OrganizationalEntityAcls
    {
        /// <summary>
        /// Field: 'elements' (on-demand)
        /// Field: 'elements*(*,organizationalTarget~(id))'
        /// Field: 'elements*(*,organizationalTarget~(logo))'
        /// Field: 'elements*(*,organizationalTarget~(name))'
        /// Field: 'elements*(*,organizationalTarget~(id,logo,name))'
        /// </summary>
        [XmlElement(ElementName = "elements")]
        [JsonProperty(PropertyName = "elements")]
        public List<OrgEntElements> Elements { get; set; }

    }
}

// WriteReturnTypes(Organizations, OrgEntElements)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'OrgEntElements'
    /// </summary>
    [Serializable, XmlRoot("OrgEntElements")]
    public class OrgEntElements
    {
        /// <summary>
        /// Field: 'state' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "state")]
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Field: 'role' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "role")]
        [JsonProperty(PropertyName = "role")]
        public string Role { get; set; }

        /// <summary>
        /// Field: 'roleAssignee' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "roleAssignee")]
        [JsonProperty(PropertyName = "roleAssignee")]
        public string RoleAssignee { get; set; }

        /// <summary>
        /// Field: 'organizationalTarget' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "organizationalTarget")]
        [JsonProperty(PropertyName = "organizationalTarget")]
        public string OrganizationalTarget { get; set; }

        /// <summary>
        /// Field: 'organizationalTarget~' (on-demand)
        /// Field: 'organizationalTarget~(id)'
        /// </summary>
        [XmlElement(ElementName = "organizationalTarget~")]
        [JsonProperty(PropertyName = "organizationalTarget~")]
        public Organization Organization { get; set; }

    }
}

// WriteReturnTypeFields(Organizations)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'organization', 'croppedImage', 'OrganizationalEntityAcls', 'OrgEntElements' return types.
    /// </summary>
    public static class OrganizationsFields {
        /// <summary>
        /// Includes the field 'id'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithId(this FieldSelector<Organization> me) { return me.Add("id"); }
        
        /// <summary>
        /// Includes the field 'name'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithName(this FieldSelector<Organization> me) { return me.Add("name"); }
        
        /// <summary>
        /// Includes the field 'logo'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithLogo(this FieldSelector<Organization> me) { return me.Add("logo"); }
        
        /// <summary>
        /// Includes the field 'vanityName'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithVanityName(this FieldSelector<Organization> me) { return me.Add("vanityName"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<Organization> WithAllFields(this FieldSelector<Organization> me) { return me.AddRange("id", "name", "logo", "vanityName"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(id))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsId(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(id))"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(logo))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsLogo(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(logo))"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(name))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsName(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(name))"); }
        
        /// <summary>
        /// Includes the field 'elements*(*,organizationalTarget~(id,logo,name))'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithOrgEntElementsAll(this FieldSelector<OrganizationalEntityAcls> me) { return me.Add("elements*(*,organizationalTarget~(id,logo,name))"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrganizationalEntityAcls> WithAllFields(this FieldSelector<OrganizationalEntityAcls> me) { return me.AddRange("elements*(*,organizationalTarget~(id))", "elements*(*,organizationalTarget~(logo))", "elements*(*,organizationalTarget~(name))", "elements*(*,organizationalTarget~(id,logo,name))"); }
        
        /// <summary>
        /// Includes the field 'state'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithState(this FieldSelector<OrgEntElements> me) { return me.Add("state"); }
        
        /// <summary>
        /// Includes the field 'role'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithRole(this FieldSelector<OrgEntElements> me) { return me.Add("role"); }
        
        /// <summary>
        /// Includes the field 'roleAssignee'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithRoleAssignee(this FieldSelector<OrgEntElements> me) { return me.Add("roleAssignee"); }
        
        /// <summary>
        /// Includes the field 'organizationalTarget'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithOrganizationalTarget(this FieldSelector<OrgEntElements> me) { return me.Add("organizationalTarget"); }
        
        /// <summary>
        /// Includes the field 'organizationalTarget~(id)'.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithOrganization(this FieldSelector<OrgEntElements> me) { return me.Add("organizationalTarget~(id)"); }
        
        /// <summary>
        /// Includes all the fields.
        /// </summary>
        /// <param name="me">The field selector.</param>
        /// <returns>The field selector.</returns>
        public static FieldSelector<OrgEntElements> WithAllFields(this FieldSelector<OrgEntElements> me) { return me.AddRange("state", "role", "roleAssignee", "organizationalTarget", "organizationalTarget~(id)"); }
        
    }
}

#endregion

#region ReturnTypes for Shares

// WriteReturnTypeFields(Shares)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the '' return types.
    /// </summary>
    public static class SharesFields {
    }
}

#endregion

#region ReturnTypes for Common

// WriteReturnTypes(Common, PostShare)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostShare'
    /// </summary>
    [Serializable, XmlRoot("PostShare")]
    public class PostShare
    {
        /// <summary>
        /// Field: 'owner' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "owner")]
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public PostShareText Text { get; set; }

        /// <summary>
        /// Field: 'subject' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "subject")]
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Field: 'distribution' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distribution")]
        [JsonProperty(PropertyName = "distribution")]
        public Distribution Distribution { get; set; }

        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        [JsonProperty(PropertyName = "content")]
        public PostShareContent Content { get; set; }

    }
}

// WriteReturnTypes(Common, text)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'text'
    /// </summary>
    [Serializable, XmlRoot("text")]
    public class PostShareText
    {
        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public string Text { get; set; }

    }
}

// WriteReturnTypes(Common, postShareContent)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'postShareContent'
    /// </summary>
    [Serializable, XmlRoot("postShareContent")]
    public class PostShareContent
    {
        /// <summary>
        /// Field: 'contentEntities' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "contentEntities")]
        [JsonProperty(PropertyName = "contentEntities")]
        public List<PostShareContentEntities> ContentEntities { get; set; }

        /// <summary>
        /// Field: 'title' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "title")]
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

    }
}

// WriteReturnTypes(Common, postShareContentEntities)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'postShareContentEntities'
    /// </summary>
    [Serializable, XmlRoot("postShareContentEntities")]
    public class PostShareContentEntities
    {
        /// <summary>
        /// Field: 'entityLocation' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "entityLocation")]
        [JsonProperty(PropertyName = "entityLocation")]
        public string EntityLocation { get; set; }

        /// <summary>
        /// Field: 'thumbnails' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "thumbnails")]
        [JsonProperty(PropertyName = "thumbnails")]
        public List<PostShareContentThumbnails> Thumbnails { get; set; }

    }
}

// WriteReturnTypes(Common, PostShareContentThumbnails)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostShareContentThumbnails'
    /// </summary>
    [Serializable, XmlRoot("PostShareContentThumbnails")]
    public class PostShareContentThumbnails
    {
        /// <summary>
        /// Field: 'imageSpecificContent' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "imageSpecificContent")]
        [JsonProperty(PropertyName = "imageSpecificContent")]
        public JObject ImageSpecificContent { get; set; }

        /// <summary>
        /// Field: 'publishers' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "publishers")]
        [JsonProperty(PropertyName = "publishers")]
        public JObject Publishers { get; set; }

        /// <summary>
        /// Field: 'resolvedUrl' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "resolvedUrl")]
        [JsonProperty(PropertyName = "resolvedUrl")]
        public string ResolvedUrl { get; set; }

        /// <summary>
        /// Field: 'authors' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "authors")]
        [JsonProperty(PropertyName = "authors")]
        public JObject Authors { get; set; }

    }
}

// WriteReturnTypes(Common, PostShareResult)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'PostShareResult'
    /// </summary>
    [Serializable, XmlRoot("PostShareResult")]
    public class PostShareResult
    {
        /// <summary>
        /// Field: 'owner' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "owner")]
        [JsonProperty(PropertyName = "owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Field: 'activity' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "activity")]
        [JsonProperty(PropertyName = "activity")]
        public string Activity { get; set; }

        /// <summary>
        /// Field: 'edited' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "edited")]
        [JsonProperty(PropertyName = "edited")]
        public bool Edited { get; set; }

        /// <summary>
        /// Field: 'created' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "created")]
        [JsonProperty(PropertyName = "created")]
        public ShareTime Created { get; set; }

        /// <summary>
        /// Field: 'subject' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "subject")]
        [JsonProperty(PropertyName = "subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Field: 'id' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "id")]
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Field: 'lastModified' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "lastModified")]
        [JsonProperty(PropertyName = "lastModified")]
        public ShareTime LastModified { get; set; }

        /// <summary>
        /// Field: 'text' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "text")]
        [JsonProperty(PropertyName = "text")]
        public PostShareText Text { get; set; }

        /// <summary>
        /// Field: 'distribution' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "distribution")]
        [JsonProperty(PropertyName = "distribution")]
        public Distribution Distribution { get; set; }

        /// <summary>
        /// Field: 'content' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "content")]
        [JsonProperty(PropertyName = "content")]
        public PostShareContent Content { get; set; }

    }
}

// WriteReturnTypes(Common, multiLocaleString)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'multiLocaleString'
    /// </summary>
    [Serializable, XmlRoot("multiLocaleString")]
    public class MultiLocaleString
    {
        /// <summary>
        /// Field: 'localized' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "localized")]
        [JsonProperty(PropertyName = "localized")]
        public JObject Localized { get; set; }

        /// <summary>
        /// Field: 'preferredLocale' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "preferredLocale")]
        [JsonProperty(PropertyName = "preferredLocale")]
        public JObject PreferredLocale { get; set; }

    }
}

// WriteReturnTypes(Common, multiLocaleRichText)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'multiLocaleRichText'
    /// </summary>
    [Serializable, XmlRoot("multiLocaleRichText")]
    public class MultiLocaleRichText
    {
        /// <summary>
        /// Field: 'localized' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "localized")]
        [JsonProperty(PropertyName = "localized")]
        public JObject Localized { get; set; }

        /// <summary>
        /// Field: 'preferredLocale' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "preferredLocale")]
        [JsonProperty(PropertyName = "preferredLocale")]
        public JObject PreferredLocale { get; set; }

    }
}

// WriteReturnTypes(Common, shareCreated)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'shareCreated'
    /// </summary>
    [Serializable, XmlRoot("shareCreated")]
    public class ShareTime
    {
        /// <summary>
        /// Field: 'actor' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "actor")]
        [JsonProperty(PropertyName = "actor")]
        public string Actor { get; set; }

        /// <summary>
        /// Field: 'time' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "time")]
        [JsonProperty(PropertyName = "time")]
        public long Time { get; set; }

    }
}

// WriteReturnTypes(Common, distribution)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'distribution'
    /// </summary>
    [Serializable, XmlRoot("distribution")]
    public class Distribution
    {
        /// <summary>
        /// Field: 'linkedInDistributionTarget' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "linkedInDistributionTarget")]
        [JsonProperty(PropertyName = "linkedInDistributionTarget")]
        public LinkedInDistributionTarget LinkedInDistributionTarget { get; set; }

    }
}

// WriteReturnTypes(Common, LlinkedInDistributionTarget)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Linq;

    /// <summary>
    /// Name: 'LlinkedInDistributionTarget'
    /// </summary>
    [Serializable, XmlRoot("LlinkedInDistributionTarget")]
    public class LinkedInDistributionTarget
    {
        /// <summary>
        /// Field: 'visibleToGuest' (on-demand)
        /// </summary>
        [XmlElement(ElementName = "visibleToGuest")]
        [JsonProperty(PropertyName = "visibleToGuest")]
        public bool VisibleToGuest { get; set; }

    }
}

// WriteReturnTypeFields(Common)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Collections.Generic;
    using System.Xml.Serialization;

    /// <summary>
    /// Field selectors for the 'PostShare', 'text', 'postShareContent', 'postShareContentEntities', 'PostShareContentThumbnails', 'PostShareResult', 'multiLocaleString', 'multiLocaleRichText', 'shareCreated', 'distribution', 'LlinkedInDistributionTarget' return types.
    /// </summary>
    public static class CommonFields {
    }
}

#endregion

#region API clients

// WriteApiGroup(Profiles)
namespace Sparkle.LinkedInNET.Profiles
{
    using System;
    using System.Xml.Serialization;
#if ASYNCTASKS
    using System.Threading.Tasks;
#endif
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Profiles'
    /// </summary>
    public class ProfilesApi : BaseApi
    {
        [System.Diagnostics.DebuggerStepThrough]
        internal ProfilesApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
        /// <summary>
        /// the profile of the current user
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/people/profile-api
        /// </remarks>
        public Profiles.Person GetMyProfile(
              UserAuthorization user 
            , string[] acceptLanguages 
            , FieldSelector<Profiles.Person> fields = null
        )
        {
            const string urlFormat = "/v2/me?{FieldSelector}";
            var url = FormatUrl(urlFormat, fields);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Profiles.Person>(context);
            return result;
        }

    #if ASYNCTASKS
        /// <summary>
        /// the profile of the current user
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/people/profile-api
        /// </remarks>
        public async Task<Profiles.Person> GetMyProfileAsync(
              UserAuthorization user 
            , string[] acceptLanguages 
            , FieldSelector<Profiles.Person> fields = null
        )
        {
            const string urlFormat = "/v2/me?{FieldSelector}";
            var url = FormatUrl(urlFormat, fields);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.AcceptLanguages = acceptLanguages;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            var exec = await this.ExecuteQueryAsync(context);
            if (!exec)
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Profiles.Person>(context);
            return result;
        }
    #endif
        
    }
}

// WriteApiGroup(Organizations)
namespace Sparkle.LinkedInNET.Organizations
{
    using System;
    using System.Xml.Serialization;
#if ASYNCTASKS
    using System.Threading.Tasks;
#endif
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Organizations'
    /// </summary>
    public class OrganizationsApi : BaseApi
    {
        [System.Diagnostics.DebuggerStepThrough]
        internal OrganizationsApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
        /// <summary>
        /// retrieve a company by using the company ID
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/organizations/organization-lookup-api
        /// </remarks>
        public Organizations.Organization GetById(
              UserAuthorization user 
            , string companyId 
            , FieldSelector<Organizations.Organization> fields = null
        )
        {
            const string urlFormat = "/v2/organizations/{CompanyId}";
            var url = FormatUrl(urlFormat, fields, "CompanyId", companyId);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Organizations.Organization>(context);
            return result;
        }

    #if ASYNCTASKS
        /// <summary>
        /// retrieve a company by using the company ID
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/organizations/organization-lookup-api
        /// </remarks>
        public async Task<Organizations.Organization> GetByIdAsync(
              UserAuthorization user 
            , string companyId 
            , FieldSelector<Organizations.Organization> fields = null
        )
        {
            const string urlFormat = "/v2/organizations/{CompanyId}";
            var url = FormatUrl(urlFormat, fields, "CompanyId", companyId);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            var exec = await this.ExecuteQueryAsync(context);
            if (!exec)
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Organizations.Organization>(context);
            return result;
        }
    #endif
        
        /// <summary>
        /// retrieve list of companies where current user is administrator and is approved
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/organizations/organization-lookup-api
        /// </remarks>
        public Organizations.OrganizationalEntityAcls GetUserAdminApprOrganizations(
              UserAuthorization user 
            , FieldSelector<Organizations.OrganizationalEntityAcls> fields = null
        )
        {
            const string urlFormat = "/v2/organizationalEntityAcls?q=roleAssignee&role=ADMINISTRATOR&state=APPROVED&{FieldSelector}";
            var url = FormatUrl(urlFormat, fields);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            if (!this.ExecuteQuery(context))
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Organizations.OrganizationalEntityAcls>(context);
            return result;
        }

    #if ASYNCTASKS
        /// <summary>
        /// retrieve list of companies where current user is administrator and is approved
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/organizations/organization-lookup-api
        /// </remarks>
        public async Task<Organizations.OrganizationalEntityAcls> GetUserAdminApprOrganizationsAsync(
              UserAuthorization user 
            , FieldSelector<Organizations.OrganizationalEntityAcls> fields = null
        )
        {
            const string urlFormat = "/v2/organizationalEntityAcls?q=roleAssignee&role=ADMINISTRATOR&state=APPROVED&{FieldSelector}";
            var url = FormatUrl(urlFormat, fields);

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "GET";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;

            var exec = await this.ExecuteQueryAsync(context);
            if (!exec)
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Organizations.OrganizationalEntityAcls>(context);
            return result;
        }
    #endif
        
    }
}

// WriteApiGroup(Shares)
namespace Sparkle.LinkedInNET.Shares
{
    using System;
    using System.Xml.Serialization;
#if ASYNCTASKS
    using System.Threading.Tasks;
#endif
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Shares'
    /// </summary>
    public class SharesApi : BaseApi
    {
        [System.Diagnostics.DebuggerStepThrough]
        internal SharesApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
        /// <summary>
        /// Share a profile/ company update based on an existing update.
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/shares/share-api
        /// </remarks>
        public Common.PostShareResult Post(
              UserAuthorization user 
            , Common.PostShare postData
        )
        {
            var url = "/v2/shares";

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "POST";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
            this.CreateJsonPostStream(context, postData);

            if (!this.ExecuteQuery(context))
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Common.PostShareResult>(context);
            return result;
        }

    #if ASYNCTASKS
        /// <summary>
        /// Share a profile/ company update based on an existing update.
        /// </summary>
        /// <remarks>
        /// See https://developer.linkedin.com/docs/guide/v2/shares/share-api
        /// </remarks>
        public async Task<Common.PostShareResult> PostAsync(
              UserAuthorization user 
            , Common.PostShare postData
        )
        {
            var url = "/v2/shares";

            var context = new RequestContext();
            context.UserAuthorization = user;
            context.Method =  "POST";
            context.UrlPath = this.LinkedInApi.Configuration.BaseApiUrl + url;
            this.CreateJsonPostStream(context, postData);

            var exec = await this.ExecuteQueryAsync(context);
            if (!exec)
                this.HandleJsonErrorResponse(context);
            
            var result = this.HandleJsonResponse<Common.PostShareResult>(context);
            return result;
        }
    #endif
        
    }
}

// WriteApiGroup(Common)
namespace Sparkle.LinkedInNET.Common
{
    using System;
    using System.Xml.Serialization;
#if ASYNCTASKS
    using System.Threading.Tasks;
#endif
    using Sparkle.LinkedInNET.Internals;

    /// <summary>
    /// Name: 'Common'
    /// </summary>
    public class CommonApi : BaseApi
    {
        [System.Diagnostics.DebuggerStepThrough]
        internal CommonApi(LinkedInApi linkedInApi)
            : base(linkedInApi)
        {
        }
        
    }
}

// WriteRootServices()
namespace Sparkle.LinkedInNET
{
    using System;
    using System.Xml.Serialization;
    using Sparkle.LinkedInNET.Internals;
    using Sparkle.LinkedInNET.Profiles;
    using Sparkle.LinkedInNET.Organizations;
    using Sparkle.LinkedInNET.Shares;
    using Sparkle.LinkedInNET.Common;

    /// <summary>
    /// The factory for LinkedIn APIs.
    /// </summary>
    public partial class LinkedInApi : BaseApi
    {
        /// <summary>
        /// The Profiles API.
        /// </summary>
        public ProfilesApi Profiles {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new ProfilesApi(this); }
        }

        /// <summary>
        /// The Organizations API.
        /// </summary>
        public OrganizationsApi Organizations {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new OrganizationsApi(this); }
        }

        /// <summary>
        /// The Shares API.
        /// </summary>
        public SharesApi Shares {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new SharesApi(this); }
        }

        /// <summary>
        /// The Common API.
        /// </summary>
        public CommonApi Common {
            [System.Diagnostics.DebuggerStepThrough]
            get { return new CommonApi(this); }
        }

    }
}

#endregion


